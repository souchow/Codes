

Exception-------

public static void main(String[] args) {
    int[] arr = {1, 2, 3};

    // a) Multiple catch blocks
    try {
        System.out.println(arr[3]);
    } catch (ArrayIndexOutOfBoundsException e) {
        System.out.println("Array index out of bounds");
    } catch (Exception e) {
        System.out.println("Exception caught");
    }

    // b) try-catch-finally combination
    try {
        System.out.println(1/0);
    } catch (ArithmeticException e) {
        System.out.println("Arithmetic exception caught");
    } finally {
        System.out.println("Finally block executed");
    }

    // c) try-finally combination
    try {
        System.out.println(arr[2]);
    } finally {
        System.out.println("Finally block executed");
    }

    // d) Exception propagation among many methods
    try {
        methodA();
    } catch (Exception e) {
        System.out.println("Exception caught in main method: " + e);
    }

    // e) Nested try blocks
    try {
        System.out.println(arr[3]);
        try {
            System.out.println(1/0);
        } catch (ArithmeticException e) {
            System.out.println("Arithmetic exception caught in nested try block");
        }
    } catch (ArrayIndexOutOfBoundsException e) {
        System.out.println("Array index out of bounds in outer try block");
    }
}

public static void methodA() throws Exception {
    methodB();
}

public static void methodB() throws Exception {
    throw new Exception("Exception thrown in methodB");
}


------
Java Program: Try-Catch-Throw-Throws


Sourav Chowdhury
Write a program to throw a checked exception explicitly using 'throw' keyword and

a) Handle the exception in same method.

b) use throws clause and handle the exception in some other method (calling method)

c) Don't either handle or use the throws clause


3 / 3

a) Handling the exception in the same method:

public class Main {
public static void main(String[] args) {
try {
throw new Exception("Checked Exception");
} catch (Exception e) {
System.out.println("Caught exception in the same method: " + e);
}
}
}

b) Using throws clause and handling the exception in a calling method:

public class Main {
public static void throwException() throws Exception {
throw new Exception("Checked Exception");
}
public static void main(String[] args) {
    try {
        throwException();
    } catch (Exception e) {
        System.out.println("Caught exception in the calling method: " + e);
    }
}
}
c) Neither handling the exception nor using the throws clause:

public class Main {
public static void throwException() {
throw new RuntimeException("Unchecked Exception");
}
public static void main(String[] args) {
    throwException();
}
}
This program will result in an uncaught exception and will terminate the program with an error.
